DELIMITER $$

CREATE PROCEDURE DeleteOldRecords(IN p_limit INT, IN p_date DATE)
BEGIN
    DECLARE v_done INT DEFAULT 0;
    DECLARE v_a_id INT;
    
    DECLARE cur CURSOR FOR
        SELECT a_id
        FROM a
        WHERE created_time < p_date
        LIMIT p_limit;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1;

    delete_loop: LOOP
        -- Start transaction
        START TRANSACTION;
        
        OPEN cur;

        delete_inner_loop: LOOP
            FETCH cur INTO v_a_id;

            IF v_done THEN
                LEAVE delete_inner_loop;
            END IF;

            DELETE FROM a WHERE a_id = v_a_id;
        END LOOP delete_inner_loop;

        CLOSE cur;

        -- Commit transaction
        COMMIT;

        -- Exit outer loop if no rows were deleted
        IF v_done THEN
            LEAVE delete_loop;
        END IF;
    END LOOP delete_loop;
END $$

DELIMITER ;



CALL DeleteOldRecords(100, '2023-05-30');

--- without cursor --------------


DELIMITER $$

CREATE PROCEDURE DeleteOldRecords(IN p_limit INT, IN p_date DATE)
BEGIN
    DECLARE rows_affected INT DEFAULT 0;

    delete_loop: LOOP
        -- Start a transaction
        START TRANSACTION;

        -- Perform the batch delete
        DELETE FROM a
        WHERE a_id IN (
            SELECT a_id
            FROM (
                SELECT a_id
                FROM a
                WHERE created_time < p_date
                LIMIT p_limit
            ) AS subquery
        );

        -- Get the number of affected rows
        SET rows_affected = ROW_COUNT();

        -- Commit the transaction
        COMMIT;

        -- Exit loop if no rows were deleted
        IF rows_affected = 0 THEN
            LEAVE delete_loop;
        END IF;
    END LOOP delete_loop;
END $$

DELIMITER ;


------------------------------------------------

DELIMITER $$

CREATE PROCEDURE DeleteOldRecords(IN p_limit INT, IN p_date DATE)
BEGIN
    DECLARE rows_affected INT DEFAULT 1;

    delete_loop: WHILE rows_affected > 0 DO
        -- Start a transaction
        START TRANSACTION;

        -- Perform the batch delete
        DELETE FROM a
        WHERE a_id IN (
            SELECT a_id
            FROM (
                SELECT a_id
                FROM a
                WHERE created_time < p_date
                LIMIT p_limit
            ) AS subquery
        );

        -- Get the number of affected rows
        SET rows_affected = ROW_COUNT();

        -- Commit the transaction
        COMMIT;
    END WHILE;
END $$

DELIMITER ;


------------------------------------


DELIMITER $$

CREATE PROCEDURE DeleteOldRecords(IN p_limit INT, IN p_date DATETIME)
BEGIN
    DECLARE rows_affected INT DEFAULT 0;

    delete_loop: LOOP
        -- Create a temporary table to hold the IDs to be deleted
        CREATE TEMPORARY TABLE IF NOT EXISTS temp_ids (a_id INT);

        -- Insert IDs into the temporary table
        INSERT INTO temp_ids (a_id)
        SELECT a_id
        FROM a
        WHERE created_time < p_date
        LIMIT p_limit;

        -- Get the number of rows inserted
        SET rows_affected = (SELECT COUNT(*) FROM temp_ids);

        -- Delete from the main table using the IDs from the temporary table
        DELETE FROM a
        WHERE a_id IN (SELECT a_id FROM temp_ids);

        -- Drop the temporary table
        DROP TEMPORARY TABLE IF EXISTS temp_ids;

        -- Commit the transaction
        COMMIT;

        -- Exit loop if no rows were deleted
        IF rows_affected = 0 THEN
            LEAVE delete_loop;
        END IF;
    END LOOP delete_loop;
END $$

DELIMITER ;

